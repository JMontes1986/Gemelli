create extension if not exists "uuid-ossp";
create type user_role as enum ('DOCENTE','ADMINISTRATIVO','TI','DIRECTOR','LIDER_TI');
create type device_type as enum ('PC','LAPTOP','IMPRESORA','RED','OTRO');
create type device_status as enum ('ACTIVO','EN_REPARACION','RETIRADO');
create type backup_type as enum ('NINGUNA','INCREMENTAL','COMPLETA');
create type storage_type as enum ('LOCAL_PC','EXTERNO','NUBE_EXTERNA');
create type priority as enum ('BAJA','MEDIA','ALTA','CRITICA');
create type ticket_status as enum ('ABIERTO','EN_PROCESO','RESUELTO','CERRADO');
create table if not exists org_units ( id uuid primary key default uuid_generate_v4(), name text not null unique );
create table if not exists users ( id uuid primary key, email text not null unique, full_name text, role user_role not null default 'DOCENTE', org_unit_id uuid references org_units(id), created_at timestamptz default now() );
create table if not exists devices ( id uuid primary key default uuid_generate_v4(), asset_tag text unique, name text not null, type device_type not null, org_unit_id uuid references org_units(id), status device_status not null default 'ACTIVO', current_user_id uuid references users(id), image_url text, location text, purchase_date date, warranty_end date, notes text, created_at timestamptz default now(), updated_at timestamptz default now() );
create table if not exists device_specs ( id uuid primary key default uuid_generate_v4(), device_id uuid references devices(id) on delete cascade, section text check (section in ('HARDWARE','SOFTWARE')), key text, value text );
create table if not exists device_logs ( id uuid primary key default uuid_generate_v4(), device_id uuid references devices(id) on delete cascade, action text, description text, performed_by uuid references users(id), created_at timestamptz default now() );
create table if not exists backups ( id uuid primary key default uuid_generate_v4(), device_id uuid references devices(id) on delete cascade, frequency backup_type not null, storage storage_type not null, last_run_at timestamptz, next_run_at timestamptz, evidence_url text, notes text, created_at timestamptz default now() );
create table if not exists tickets ( id uuid primary key default uuid_generate_v4(), created_by uuid references users(id), role_at_creation user_role not null, title text not null, description text, priority priority not null default 'MEDIA', status ticket_status not null default 'ABIERTO', assigned_to uuid references users(id), device_id uuid references devices(id), created_at timestamptz default now(), updated_at timestamptz default now() );
create table if not exists ticket_comments ( id uuid primary key default uuid_generate_v4(), ticket_id uuid references tickets(id) on delete cascade, author_id uuid references users(id), body text, attachments jsonb default '[]'::jsonb, created_at timestamptz default now() );
create table if not exists audit_chain ( id uuid primary key default uuid_generate_v4(), entity_type text, entity_id uuid, action text, sha256 text, tx_hash text, chain_id int, created_by uuid references users(id), created_at timestamptz default now() );
create table if not exists attachments ( id uuid primary key default uuid_generate_v4(), owner_table text, owner_id uuid, url text, name text, mime text, created_at timestamptz default now() );
alter table org_units enable row level security;
alter table users enable row level security;
alter table devices enable row level security;
alter table device_specs enable row level security;
alter table device_logs enable row level security;
alter table backups enable row level security;
alter table tickets enable row level security;
alter table ticket_comments enable row level security;
alter table audit_chain enable row level security;
alter table attachments enable row level security;
create policy "users self/select" on users for select using ( id = auth.uid() );
create policy "tickets insert any" on tickets for insert with check ( true );
create policy "tickets read own or ti" on tickets for select using ( created_by = auth.uid() or assigned_to = auth.uid() or exists (select 1 from users u where u.id=auth.uid() and u.role in ('TI','LIDER_TI')) );
create policy "attachments read" on attachments for select using ( true );
create policy "attachments insert" on attachments for insert with check ( true );
